<<<<<<< HEAD
///*
// * Mapping.cpp
// *
// *  Created on: May 25, 2017
// *      Author: seungmin
// */
//
//#include "Mapping.h"
//
//
//Mapping::Mapping(float firstSonarIn) {
//  xPos = 0;
//  yPos = 0;
//  xRefSonar = firstSonarIn;
//  yRefSonar = 0;
//}
//
//Mapping::~Mapping() {
//	// TODO Auto-generated destructor stub
//}
//
//void firstTurn(float secondSonarIn) {
//  yRefSonar = secondSonarIn;
//}
//
//void saveInfo(float sonarInput, bool isX) {
//  if(isX == 1) {
//    xPos = xRefSonar - sonarInput;
//  }
//  else  {
//    yPos = yRefSonar - sonarInput;
//  }
//}
//
//void sendInfo() {
//}
//
=======
/*
 * Mapping.cpp
 *
 *  Created on: May 25, 2017
 *      Author: seungmin
 */

#include "Mapping.h"


Mapping::Mapping() {
};

Mapping::~Mapping() {
	// TODO Auto-generated destructor stub
}

void Mapping::initialise(float sonarDist, float irDist)
{
	xPos[0] = irDist - centriodToSideIR_dist;
	yPos[0] = centroidToBack_dist;
	numPoints++;
	x_measure = irDist;
	y_measure = sonarDist;
}

void Mapping::savePoint(float sonarDist, float irDist, int direction)
{
	//Moving parallel to y axis positive direction
	if (direction == 1) {
		xPos[numPoints] = irDist - centriodToSideIR_dist;
		yPos[numPoints] = (y_measure - sonarDist) + yPos[numPoints -1];
		x_measure = irDist;
		y_measure = sonarDist;
	}
	//Moving parallel to x axis positive direction
	else if (direction == 2) {
		xPos[numPoints] = (x_measure - sonarDist) + xPos[numPoints - 1];
		yPos[numPoints] = irDist - centriodToSideIR_dist + y_ref;
		x_measure = sonarDist;
		y_measure = irDist;
	}
	//Moving parallel to y axis negative direction
	else if (direction == 3) {
		xPos[numPoints] = irDist - centriodToSideIR_dist + x_ref;
		yPos[numPoints] = yPos[numPoints - 1] - (y_measure - sonarDist);
		x_measure = irDist;
		y_measure = sonarDist;
	}
	//Moving parallel to x axis negative direction
	else if (direction == 4) {
		xPos[numPoints] = xPos[numPoints - 1] - (x_measure - sonarDist);
		yPos[numPoints] = irDist - centriodToSideIR_dist;
		x_measure = sonarDist;
		y_measure = irDist;
	}
	numPoints++;
}

void Mapping::robotTurned(float sonarDist, float irDist, int direction)
{
	if (direction == 1) {
		x_measure = irDist;
		y_measure = sonarDist;
	}
	else if (direction == 2) {
		x_measure = sonarDist;
		y_measure = irDist;
		y_ref = yPos[numPoints - 1];
	}
	else if (direction == 3) {
		x_measure = irDist;
		y_measure = sonarDist;
		x_ref = xPos[numPoints - 1];
	}
	else if (direction == 4){
		x_measure = sonarDist;
		y_measure = irDist;
	}
}

/*
void firstTurn(float secondSonarIn) {
 // yRefSonar = secondSonarIn;
}

void saveInfo(float sonarInput, bool isX) {
  if(isX == 1) {
//    xPos = xRefSonar - sonarInput;
  }
  else  {
 //   yPos = yRefSonar - sonarInput;
  }
}

void sendInfo() {
  
}

*/
>>>>>>> a8d7b18e9d9d3958e4b1e1b7ef1351d9b2cbca69
